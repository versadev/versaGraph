<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="mon, 06 jan 1990 00:00:01 gmt" />

    <title>versaGraph - Simple Canvas-based Graphing</title>

    <link href="css/bootstrap.css" rel="stylesheet" />

    <style>
        .debugWindow {
            position:absolute;
            display: block;
            visibility: visible;
            bottom:10px;
            right:10px;
            width:300px;
            height:200px;
            padding:5px;
            border:1px solid #000000;
            overflow:scroll;
            background-color:#EFFF99;
        }

        .debugWindowHide {
            display: none;
            visibility: hidden;
        }

        .statsWindow {
            position:absolute;
            display: block;
            visibility: visible;            
            bottom:250px;
            right:10px;
            width:300px;
            height:100px;
            padding:5px;
            border:1px solid #000000;
            overflow:scroll;
            background-color:#EFFF99;
        }

    </style>

    <script src="scripts/jquery-3.2.1.js"></script>

    <script>

        var versaGraph = (function () {

            // Private Global Variables And Functions
            var isDebug = true; // Show or hide debug window
            var isStats = true; // Show or hide stats window

            var c = null; // Canvas Object
            var ctx = null; // Canvas Object Context

            var animatePlot = true; // enable or disable plot animation
            var animateAcceleration = 0.01; // apply acceleration to animation
            var animationComplete = false; // indicate plot animation complete
            var delta = 1;
            var pointsPlotted = 0; // track the number of points plotted when animatePlot is enabled
            var pointsPlottedStart = 0;

            var frameCount = 0; // Number of total rendered frames
            var framesElapsed = 0; // Number of frames elapsed. Used to calculate FPS
            var FPS = 0; // Number of Frames per Second. Read only and calculated based on GPU capability            
            var currTime = null;
            var lastTime = null;
            var deltaTime = null;
            var AniFrame = null;

            // Set default x and y display range
            var xRangeMin = -100;
            var xRangeMax = 100;
            var yRangeMin = -10000;
            var yRangeMax = 10000;
            var xPixRes = 0;
            var yPixRes = 0;

            var graphTitle = 'Graph Title';
            var graphTitleFont = 'Arial';
            var graphTitleSize = '25'; // size in pixels
            var graphTitleColour = '#ffffff';
            var xAxisLabel = 'X-Axis Label';
            var xAxisLabelFont = 'Arial';
            var xAxisLabelSize = '15';
            var xAxisLabelColour = '#ffffff';
            var yAxisLabel = 'Y-Axis Label';
            var yAxisLabelFont = 'Arial';
            var yAxisLabelSize = '15';
            var yAxisLabelColour = '#ffffff';

            var xAxisTickFont = 'Arial';
            var xAxisTickSize = '10';
            var xAxisTickColour = '#0E95DA';
            var yAxisTickFont = 'Arial';
            var yAxisTickSize = '10';
            var yAxisTickColour = '#0E95DA';

            var graphBackgroundColour = '#223344';
            var graphPlotBorderColour = '#ffffff';
            var graphPlotBackgroundColour = '#334455';
            var graphDataPointColour = '#00ff00';
            var graphDataLineColour = '#0E95DA';

            var xNumTicks = 5;
            var yNumTicks = 5;
            var xTickLength = 10;
            var yTickLength = 10;
            var xTickColour = '#ffffff';
            var yTickColour = '#ffffff';
            var xTickStyle = 'center'; // none, inset, outset or center
            var yTickStyle = 'center'; // none, inset, outset or center

            var gridStyle = 'vertical'; // none, horizontal, vertical or both
            var gridColour = '#666666';

            var isAutoScale = true; // enable or disable x and y axis auto scale
            var graphIndent = 80; // graph plotting region is offset symetrically within the canvas area

            var canvasWidth = 800;
            var canvasHeight = 600;

            var canvasXOrigin = (canvasWidth / 2);
            var canvasYOrigin = (canvasHeight / 2);

            var x1 = 0;
            var y1 = 0;
            var x2 = 0;
            var y2 = 0;

            var x1Last = null;
            var y1Last = null;

            var seriesData = new Array(); // An array to hold a collection of data points
            var timers = new Array(); // An array to hold a collection of timers

            var drawCircle = function (x1, y1, radius, color, fill) {
                // Function - Draw a circle
                ctx.lineWidth = 1;
                ctx.strokeStyle = color;
                ctx.beginPath();
                ctx.arc(x1, y1, radius, (Math.PI/180)*0, (Math.PI/180)*360, false);
                ctx.fillStyle = color;
                if (fill == true) {
                    ctx.fill();
                }
                ctx.stroke();
                ctx.closePath();
            };

            var drawPoint = function (x1, y1, colour, lineWidth, graphType) {

                var xPix = 0;
                var yPix = 0;

                xPix = ((x1 - xRangeMin) / xPixRes) + graphIndent;
                yPix = canvasHeight - graphIndent - ((y1 - yRangeMin) / yPixRes);

                // Draw the point using the drawCircle function
                drawCircle(xPix, yPix, lineWidth, colour, false);

                if (graphType == 1) {
                    // Line graph
                    if (x1Last != null && y1Last != null) {
                        drawLine(x1Last, y1Last, xPix, yPix, graphDataLineColour, 1);
                    }
                    x1Last = xPix;
                    y1Last = yPix;
                }

            };

            var drawLine = function (x1, y1, x2, y2, colour, lineWidth) {
                // Function - Draw a line
                ctx.strokeStyle = colour;
                ctx.lineWidth = lineWidth;
                ctx.lineJoin = 'bevel';
                ctx.lineCap = 'round';
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
                ctx.closePath();            
            };

            var drawGraph = function () {

                var i = 0;
                var metrics = null;
                var textWidth = 0;

                x1Last = null;
                y1Last = null;

                if (isAutoScale == true) {
                    // Determine the x and y display range based on the series data
                    for (i = 0; i <= seriesData.length - 1; i++) {
                        if (i == 0) {
                            xRangeMin = seriesData[i].x1;
                            xRangeMax = seriesData[i].x1;
                            yRangeMin = seriesData[i].y1;
                            yRangeMax = seriesData[i].y1;
                        }

                        if (seriesData[i].x1 <= xRangeMin) {
                            xRangeMin = seriesData[i].x1;
                        }
                        if (seriesData[i].x1 >= xRangeMax) {
                            xRangeMax = seriesData[i].x1;
                        }

                        if (seriesData[i].y1 <= yRangeMin) {
                            yRangeMin = seriesData[i].y1;
                        }
                        if (seriesData[i].y1 >= yRangeMax) {
                            yRangeMax = seriesData[i].y1;
                        }
                    }
                }

                // Calculate x and y pixel resolution
                xPixRes = (xRangeMax - xRangeMin) / (canvasWidth - (2 * graphIndent));
                yPixRes = (yRangeMax - yRangeMin) / (canvasHeight - (2 * graphIndent));

                //versadev.debugWindow("xRangeMin = " + xRangeMin);
                //versadev.debugWindow("xRangeMax = " + xRangeMax);
                //versadev.debugWindow("yRangeMin = " + yRangeMin);
                //versadev.debugWindow("yRangeMax = " + yRangeMax);

                // Display graph background
                ctx.fillStyle = graphBackgroundColour;
                ctx.fillRect(0, 0, canvasWidth, canvasHeight);

                // Display plot region            
                ctx.strokeStyle = graphPlotBorderColour;
                ctx.lineWidth = 2;
                ctx.strokeRect(0 + graphIndent, 0 + graphIndent, canvasWidth - (2 * graphIndent), canvasHeight - (2 * graphIndent));
                ctx.fillStyle = graphPlotBackgroundColour;
                ctx.fillRect(0 + graphIndent + 1, 0 + graphIndent + 1, canvasWidth - (2 * graphIndent) - 2, canvasHeight - (2 * graphIndent) - 2);

                // Display major x ticks
                var xRange = xRangeMax - xRangeMin;

                var xTickAdjust = 0;
                switch (xTickStyle) {
                    case 'inset':
                        xTickAdjust = 0
                        break;
                    case 'outset':
                        xTickAdjust = xTickLength;
                        break;
                    case 'center':
                        xTickAdjust = xTickLength / 2;
                        break;
                }

                for (i = 0; i <= xNumTicks; i++) {
                    var xTick = xRangeMin + ( i * (xRange / xNumTicks));

                    var xPix = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                    var yPix1 = canvasHeight - graphIndent - ((yRangeMin - yRangeMin) / yPixRes) + xTickAdjust;
                    var yPix2 = graphIndent - xTickAdjust;

                    // Bottom x-axis ticks
                    if (xTickStyle != 'none') {
                        drawLine(xPix, yPix1, xPix, yPix1 - xTickLength, xTickColour, 1);
                    }

                    // Display x-axis tick value
                    var xTickValue = xTick.toFixed(2).toString();
                    ctx.font = xAxisTickSize + 'px ' + xAxisTickFont;
                    ctx.fillStyle = xAxisTickColour;
                    ctx.textBaseline = 'middle';
                    ctx.textAlign = 'start';
                    metrics = ctx.measureText(xTickValue);
                    textWidth = metrics.width;
                    ctx.fillText(xTickValue, xPix - (textWidth / 2), yPix1 + parseInt(xAxisTickSize));

                    // Top x-axis ticks
                    if (xTickStyle != 'none') {
                        drawLine(xPix, yPix2, xPix, yPix2 + xTickLength, xTickColour, 1);
                    }
                    
                    // Check for x-axis grid display
                    if (gridStyle == 'horizontal' || gridStyle == 'both') {
                        var x1PixGrid = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                        var y1PixGrid = graphIndent;
                        var x2PixGrid = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                        var y2PixGrid = canvasHeight - graphIndent;
                        drawLine(x1PixGrid, y1PixGrid, x2PixGrid, y2PixGrid, gridColour, 1);
                    }

                }

                // Display major y ticks
                var yRange = yRangeMax - yRangeMin;

                var yTickAdjust = 0;
                switch (yTickStyle) {
                    case 'inset':
                        yTickAdjust = 0
                        break;
                    case 'outset':
                        yTickAdjust = yTickLength;
                        break;
                    case 'center':
                        yTickAdjust = yTickLength / 2;
                        break;
                }

                for (i = 0; i <= yNumTicks; i++) {
                    var yTick = yRangeMin + (i * (yRange / yNumTicks));

                    var xPix1 = graphIndent - yTickAdjust;
                    var xPix2 = canvasWidth - graphIndent + yTickAdjust;
                    var yPix = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);

                    // Left y-axis ticks
                    if (yTickStyle != 'none') {
                        drawLine(xPix1, yPix, xPix1 + yTickLength, yPix, yTickColour, 1);
                    }

                    // Display y-axis tick value
                    var yTickValue = yTick.toFixed(2).toString();
                    ctx.font = yAxisTickSize + 'px ' + yAxisTickFont;
                    ctx.fillStyle = yAxisTickColour;
                    ctx.textBaseline = 'middle';
                    ctx.textAlign = 'start';
                    metrics = ctx.measureText(yTickValue);
                    textWidth = metrics.width;
                    ctx.fillText(yTickValue, xPix1 - (textWidth + parseInt(yAxisTickSize)), yPix);

                    // Right y-axis ticks
                    if (yTickStyle != 'none') {
                        drawLine(xPix2, yPix, xPix2 - yTickLength, yPix, yTickColour, 1);
                    }
                    
                    // Check for y-axis grid display
                    if (gridStyle == 'vertical' || gridStyle == 'both') {
                        var x1PixGrid = graphIndent;
                        var y1PixGrid = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);
                        var x2PixGrid = canvasWidth - graphIndent;
                        var y2PixGrid = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);
                        drawLine(x1PixGrid, y1PixGrid, x2PixGrid, y2PixGrid, gridColour, 1);
                    }

                }

                // Display title and axis labels

                // Title
                ctx.font = graphTitleSize + 'px ' + graphTitleFont;
                ctx.fillStyle = graphTitleColour;
                ctx.textBaseline = 'middle';
                ctx.textAlign = 'start';
                metrics = ctx.measureText(graphTitle);
                textWidth = metrics.width;
                ctx.fillText(graphTitle, (graphIndent + (canvasWidth - (2 * graphIndent)) / 2) - (textWidth / 2), graphIndent / 2);            

                // X-Axis
                ctx.font = xAxisLabelSize + 'px ' + xAxisLabelFont;
                ctx.fillStyle = xAxisLabelColour;
                ctx.textBaseline = 'middle';
                ctx.textAlign = 'start';
                metrics = ctx.measureText(xAxisLabel);
                textWidth = metrics.width;
                ctx.fillText(xAxisLabel, (graphIndent + (canvasWidth - (2 * graphIndent)) / 2) - (textWidth / 2), canvasHeight - (graphIndent / 4));

                // Y-Axis
                ctx.save();
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                var angleInRadians = -90 * Math.PI / 180;
                
                ctx.font = yAxisLabelSize + 'px ' + yAxisLabelFont;
                ctx.fillStyle = yAxisLabelColour;
                ctx.textBaseline = 'middle';
                metrics = ctx.measureText(yAxisLabel);
                textWidth = metrics.width;
                var xPos = (graphIndent / 4) - textWidth / 2;
                var yPos = graphIndent + ((canvasHeight - (2 * graphIndent)) / 2);
                ctx.translate(xPos + 0.5 * textWidth, yPos + 0.5 * yAxisLabelSize);
                ctx.rotate(angleInRadians);
                ctx.fillText(yAxisLabel, -0.5 * textWidth, -0.5 * yAxisLabelSize);
                ctx.restore();
                                                    
            };

            var displayData = function() {

                // Display the series data
                //animateAcceleration = animateAcceleration * animateAcceleration;
                //animateAcceleration = animateAcceleration + animateAcceleration;
                animateAcceleration = 0.02 * animateAcceleration;
                delta = delta + parseInt(animateAcceleration);
             

                if (animatePlot == true) {
                    
                    /*
                    if (animationComplete == false) {
                        pointsPlottedStart = pointsPlotted;
                        if (pointsPlottedStart > 0) {
                            pointsPlottedStart = pointsPlottedStart + 1;
                        }
                        pointsPlotted = pointsPlotted + delta;
                        if (pointsPlotted >= seriesData.length - 1) {
                            pointsPlotted = seriesData.length - 1;
                            animationComplete = true;
                        }
                        versadev.debugWindow('framesElapsed = ' + framesElapsed + ' delta = ' + delta.toString() + ' pointsPlottedStart = ' + pointsPlottedStart.toString() + ' pointsPlotted = ' + pointsPlotted.toString());

                        for (i = pointsPlottedStart; i <= pointsPlotted; i++) {
                            x1 = seriesData[i].x1;
                            y1 = seriesData[i].y1;
                            drawPoint(x1, y1, graphDataPointColour, 4, 1);
                        } 

                    }
                    */

                    pointsPlotted = seriesData.length - 1;

                    for (i = 0; i <= pointsPlotted; i++) {
                        x1 = seriesData[i].x1;
                        y1 = seriesData[i].y1;
                        drawPoint(x1, y1, graphDataPointColour, 4, 1);
                    }

                    animationComplete = true;

                } else {

                    pointsPlotted = seriesData.length - 1;

                    for (i = 0; i <= pointsPlotted; i++) {
                        x1 = seriesData[i].x1;
                        y1 = seriesData[i].y1;
                        drawPoint(x1, y1, graphDataPointColour, 4, 1);
                    }  
                }

            };

            // Define Data class
            var xyData = function (id, x1, y1) {

                // Object representing a data point
                this.id = id;
                this.x1 = x1;
                this.y1 = y1;

                // Attach methods to object here                    

            };

            // Define Timer class
            var timer = function (id, isActive, duration, elapsedTime) {

                // Object representing a timer
                this.id = id;
                this.isActive = isActive;
                this.duration = duration; // the time to wait in milliseconds before activating
                this.elapsedTime = elapsedTime; // the time elapsed in milliseconds to be compared with duration

                // Attach methods to object here                    
                this.Active = function() {
                    this.isActive = true;
                }

                this.InActive = function() {
                    this.isActive = false;
                }

            };

            var fw_update = function () {
                // Update The Interface

                // render graph
                renderScene(delta);
            };

            var renderScene = function (delta) {

                // Redraw the graph axes
                drawGraph();

                // Display graph data
                displayData();

                // Update animation stats
                updateAnimationStats();

                // Keep Looping
                AniFrame(renderScene);

            };

            var generateGraphData = function (mode) {

                // This function generates sample xy data for plotting
                        
                var x1 = 0;
                var y1 = 0;

                var yDataMin = -5;
                var yDataMax = 50;

                var arrayIndex = 0;

                for (i = yDataMin; i <= yDataMax; i++) {

                    // Generate quadratic xy data
                    //x1 = i;
                    //y1 = x1 * x1;

                    if (mode == 0) {

                        if (arrayIndex == 0) {
                            // Clear current series data before generating first data point
                            x1Last = null;
                            y1Last = null;
                            seriesData.length = 0;
                        }

                        // Generate random data for all elements of series data
                        x1 = i;
                        y1 = versadev.randomNumberFromRange(yDataMin, yDataMax);

                        // Generate data point and add to series (collection)
                        var dataPoint = new xyData(i, x1, y1);
                        seriesData.push(dataPoint);

                    }

                    if (mode == 1) {
                        // Shift the series data and only generate a new data point for the last element                            

                        if (arrayIndex < seriesData.length - 1) {
                            //seriesData[arrayIndex].x1 = seriesData[arrayIndex + 1].x1;
                            seriesData[arrayIndex].y1 = seriesData[arrayIndex + 1].y1;
                        } else {                            
                            seriesData[arrayIndex].y1 = versadev.randomNumberFromRange(yDataMin, yDataMax);
                        }

                    }

                    arrayIndex ++;

                }

            }

            var updateAnimationStats = function () {
               
               frameCount++; // Increment the total frame count

               if (isStats == true) {
                   $('#frameCount').text(frameCount);
               }

               // Calculate FPS
               currTime = new Date().getTime(); // Get current time
               deltaTime = (currTime - lastTime) // Determine time (milliseconds) between last frame
               
               timers[0].elapsedTime = timers[0].elapsedTime + deltaTime;
               timers[1].elapsedTime = timers[1].elapsedTime + deltaTime;

               lastTime = currTime // Update last time
               framesElapsed++; // Increment the elapsed frames used to determine FPS

               // Check if elapsed time is greater than or equal to 1000 milliseconds
               if (timers[0].elapsedTime >= timers[0].duration) {

                    // Mark timer as active
                    timers[0].Active();

                   // Calculate FPS
                   var FPS = 0;
                   FPS = parseInt(framesElapsed / (timers[0].elapsedTime / 1000)).toString();

                   // Reset timer
                   timers[0].InActive();
                   timers[0].elapsedTime = 0;
                   
                   // Reset counters
                   framesElapsed = 0;
                   if (isStats == true) {
                       $('#fps').text(FPS); // Display FPS
                   }
               }

               // Check if we need to generate new data point or data
               if (timers[1].elapsedTime >= timers[1].duration) {

                    // Mark timer as active
                    timers[1].Active();

                    // Generate new data
                    generateGraphData(1);

                    // Reset timer
                    timers[1].InActive();
                    timers[1].elapsedTime = 0;

                    // Reset animation
                    animationComplete = false;
                    pointsPlotted = 0;
                    pointsPlottedStart = 0;
               }

               if (isStats == true) {
                 $('#ndg').text(timers[1].elapsedTime);
               }
              
            };

            var reqAniFrame = function () {

                // Finds the first API that works to optimize the animation / game loop, otherwise defaults to setTimeout().                
                return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (/* function */ callback, /* DOMElement */ element) {
                    window.setTimeout(callback, 1000 / 60);
                };                
            };

            // Privileged / Public Methods And Properties
            return {

                appVersion: 1.0,

                init: function() {
                
                    animationComplete = false; // reset animation complete, if animation enabled

                    // Check for Debug mode
                    if (isDebug == true) {
                        $('#debugWindow').css('display', 'block');
                    } else {
                        $('#debugWindow').css('display', 'none');
                    }

                    // Check for Stats mode
                    if (isStats == true) {                        
                        $('#statsWindow').css('display', 'block');
                    } else {                        
                        $('#statsWindow').css('display', 'none');
                    }

                    // Get the canvas element using DOM
                    c = document.getElementById('canvasGraph');

                    // Make sure we don't execute when canvas is not supported
                    if (c.getContext) {

                        // Use getContext to use the canvas for drawing
                        ctx = c.getContext("2d");

                        // Setup timers
                        let timer1 = new timer(1, false, 1000, 0); // Defines duration to wait before updating stats window
                        timers.push(timer1);

                        let timer2 = new timer(2, false, 100, 0); // Defines duration to wait before generating new data
                        timers.push(timer2);

                        // Generate sample xy data to display
                        generateGraphData(0);

                        // Display graph
                        drawGraph();

                        if (animatePlot == true) {
                            // Setup the animation
                            AniFrame = reqAniFrame();                   
                            AniFrame(renderScene); // Start the animation
                        } else {
                            displayData();
                        }

                        // Display graph
                        //drawGraph();
                        //fw_update();

                    } else {
                        window.alert('Your browser does not support HTML5.');
                    }
                }

            };
        })();

        var versadev = function () {

            // Private Variables And Functions
            var privateVariable = 10;

            function privateFunction() {
                var a = 1;
                alert(privateVariable);
                return false;
            }

            // Privileged / Public Methods And Properties
            return {

                debugWindow: function (debugMsg) {
                    var win = document.getElementById('debugWindow');
                    win.innerHTML = debugMsg + '</br>' + win.innerHTML;
                    return false;
                },

                debugWindowClear: function () {
                    var win = document.getElementById('debugWindow');
                    win.innerHTML = '';
                    return false;
                },

                toggleDebug: function() {
                    $("#debugWindow").toggleClass("debugWindowHide");
                },

                randomNumber: function (maxValue) {
                    // Generate A Random Number From 0 to maxValue
                    var min = 0;
                    var max = maxValue;
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                },

                randomNumberFromRange: function (minValue, maxValue) {
                    // Generate A Random Number From minValue to maxValue
                    var min = minValue;
                    var max = maxValue;
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                },

                getRandomColor: function () {
                    var letters = new Array();
                    letters = '0123456789ABCDEF'.split('');
                    var color = '#';
                    for (var i = 0; i < 6; i++) {
                        color += letters[Math.round(Math.random() * 15)];
                    }
                    return color;
                }

            };

        }();

    </script>

</head>
<body>

    <div class="container body-content">

        <h2>versaGraph - Simple Canvas-based Graphing</h2>

        <p>
            This is a simple example of graphing data using HTML5 Canvas.<br />
            To generate and display new data, <a href="javascript:versaGraph.init();">click here...</a><br />
            Click <a href="javascript:versadev.toggleDebug();">here</a> to toggle display of debug window.
        </p>

        <div style="position:relative;top:10px;left:10px;">
            <canvas id="canvasGraph" width="800" height="600" style="border:1px solid #000000;"></canvas> 
        </div>
    
        <div id="debugWindow" class="debugWindow">
            Debug Window
        </div>

        <div id="statsWindow" class="statsWindow">
            Frame count: <span id="frameCount">0</span><br />
            FPS: <span id="fps">0</span><br />
            New Data Gen Elapsed Count: <span id="ndg">0</span><br />
        </div>

        <hr />
        <footer>
            <p>&copy; 2017 - VersaDev Pty Ltd</p>
        </footer>

    </div>

    <script>

        $( document ).ready(function() {
            versaGraph.init();
        });

    </script>
</body>
</html>
