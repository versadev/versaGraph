<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="mon, 06 jan 1990 00:00:01 gmt" />

    <title>versaGraph</title>

    <script type="text/javascript">

    var versaGraph = (function () {

        // Private Global Variables And Functions

        var frameRate = 0; // Initialise frame rate

        var c = null; // Canvas Object
        var ctx = null; // Canvas Object Context

        var animatePlot = true; // enable or disable plot animation
        var animateAcceleration = 0.5; // apply acceleration to animation
        var delta = 0;
        var pointsPlotted = 0; // track the number of points plotted when animatePlot is enabled

        // Set default x and y display range
        var xRangeMin = -100;
        var xRangeMax = 100;
        var yRangeMin = -10000;
        var yRangeMax = 10000;
        var xPixRes = 0;
        var yPixRes = 0;

        var graphTitle = 'Graph Title';
        var graphTitleFont = 'Arial';
        var graphTitleSize = '25'; // size in pixels
        var graphTitleColour = '#ffffff';
        var xAxisLabel = 'X-Axis Label';
        var xAxisLabelFont = 'Arial';
        var xAxisLabelSize = '15';
        var xAxisLabelColour = '#ffffff';
        var yAxisLabel = 'Y-Axis Label';
        var yAxisLabelFont = 'Arial';
        var yAxisLabelSize = '15';
        var yAxisLabelColour = '#ffffff';

        var xAxisTickFont = 'Arial';
        var xAxisTickSize = '10';
        var xAxisTickColour = '#0E95DA';
        var yAxisTickFont = 'Arial';
        var yAxisTickSize = '10';
        var yAxisTickColour = '#0E95DA';

        var graphBackgroundColour = '#223344';
        var graphPlotBorderColour = '#ffffff';
        var graphPlotBackgroundColour = '#334455';
        var graphDataPointColour = '#00ff00';
        var graphDataLineColour = '#0E95DA';

        var xNumTicks = 5;
        var yNumTicks = 5;
        var xTickLength = 10;
        var yTickLength = 10;
        var xTickColour = '#ffffff';
        var yTickColour = '#ffffff';
        var xTickStyle = 'center'; // none, inset, outset or center
        var yTickStyle = 'center'; // none, inset, outset or center

        var gridStyle = 'vertical'; // none, horizontal, vertical or both
        var gridColour = '#666666';

        var isAutoScale = true; // enable or disable x and y axis auto scale
        var graphIndent = 80; // graph plotting region is offset symetrically within the canvas area

        var canvasWidth = 800;
        var canvasHeight = 600;

        var canvasXOrigin = (canvasWidth / 2);
        var canvasYOrigin = (canvasHeight / 2);

        var x1 = 0;
        var y1 = 0;
        var x2 = 0;
        var y2 = 0;

        var x1Last = null;
        var y1Last = null;

        var seriesData = new Array(); // An Array To Hold A Collection Of Data Points.

        var drawCircle = function (x1, y1, radius, color, fill) {
            // Function - Draw A Circle
            ctx.lineWidth = 1;
            ctx.strokeStyle = color;
            ctx.beginPath();
            ctx.arc(x1, y1, radius, (Math.PI/180)*0, (Math.PI/180)*360, false);
            ctx.fillStyle = color;
            if (fill == true) {
                ctx.fill();
            }
            ctx.stroke();
            ctx.closePath();
        };

        var drawPoint = function (x1, y1, colour, lineWidth, graphType) {

            var xPix = 0;
            var yPix = 0;

            xPix = ((x1 - xRangeMin) / xPixRes) + graphIndent;
            yPix = canvasHeight - graphIndent - ((y1 - yRangeMin) / yPixRes);

            // Draw the point using the drawCircle function
            drawCircle(xPix, yPix, lineWidth, colour, false);

            if (graphType == 1) {
                // Line graph
                if (x1Last != null && y1Last != null) {
                    drawLine(x1Last, y1Last, xPix, yPix, graphDataLineColour, 1);
                }
                x1Last = xPix;
                y1Last = yPix;
            }

        };

        var drawLine = function (x1, y1, x2, y2, colour, lineWidth) {
            // Function - Draw A Line
            ctx.strokeStyle = colour;
            ctx.lineWidth = lineWidth;
            ctx.lineJoin = 'bevel';
            ctx.lineCap = 'round';
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
            ctx.closePath();            
        };

        var drawGraph = function () {

            var i = 0;
            var metrics = null;
            var textWidth = 0;

            x1Last = null;
            y1Last = null;

            if (isAutoScale == true) {
                // Determine the x and y display range based on the series data
                for (i = 0; i <= seriesData.length - 1; i++) {
                    if (i == 0) {
                        xRangeMin = seriesData[i].x1;
                        xRangeMax = seriesData[i].x1;
                        yRangeMin = seriesData[i].y1;
                        yRangeMax = seriesData[i].y1
                    }

                    if (seriesData[i].x1 <= xRangeMin) {
                        xRangeMin = seriesData[i].x1;
                    }
                    if (seriesData[i].x1 >= xRangeMax) {
                        xRangeMax = seriesData[i].x1;
                    }

                    if (seriesData[i].y1 <= yRangeMin) {
                        yRangeMin = seriesData[i].y1;
                    }
                    if (seriesData[i].y1 >= yRangeMax) {
                        yRangeMax = seriesData[i].y1;
                    }
                }
            }

            // Calculate x and y pixel resolution
            xPixRes = (xRangeMax - xRangeMin) / (canvasWidth - (2 * graphIndent));
            yPixRes = (yRangeMax - yRangeMin) / (canvasHeight - (2 * graphIndent));

            //versadev.debugWindow("xRangeMin = " + xRangeMin);
            //versadev.debugWindow("xRangeMax = " + xRangeMax);
            //versadev.debugWindow("yRangeMin = " + yRangeMin);
            //versadev.debugWindow("yRangeMax = " + yRangeMax);

            // Display graph background
            ctx.fillStyle = graphBackgroundColour;
            ctx.fillRect(0, 0, canvasWidth, canvasHeight);

            // Display plot region            
            ctx.strokeStyle = graphPlotBorderColour;
            ctx.lineWidth = 2;
            ctx.strokeRect(0 + graphIndent, 0 + graphIndent, canvasWidth - (2 * graphIndent), canvasHeight - (2 * graphIndent));
            ctx.fillStyle = graphPlotBackgroundColour;
            ctx.fillRect(0 + graphIndent + 1, 0 + graphIndent + 1, canvasWidth - (2 * graphIndent) - 2, canvasHeight - (2 * graphIndent) - 2);

            // Display major x ticks
            var xRange = xRangeMax - xRangeMin;

            var xTickAdjust = 0;
            switch (xTickStyle) {
                case 'inset':
                    xTickAdjust = 0
                    break;
                case 'outset':
                    xTickAdjust = xTickLength;
                    break;
                case 'center':
                    xTickAdjust = xTickLength / 2;
                    break;
            }

            for (i = 0; i <= xNumTicks; i++) {
                var xTick = xRangeMin + ( i * (xRange / xNumTicks));

                var xPix = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                var yPix1 = canvasHeight - graphIndent - ((yRangeMin - yRangeMin) / yPixRes) + xTickAdjust;
                var yPix2 = graphIndent - xTickAdjust;

                // Bottom x-axis ticks
                if (xTickStyle != 'none') {
                    drawLine(xPix, yPix1, xPix, yPix1 - xTickLength, xTickColour, 1);
                }

                // Display x-axis tick value
                var xTickValue = xTick.toFixed(2).toString();
                ctx.font = xAxisTickSize + 'px ' + xAxisTickFont;
                ctx.fillStyle = xAxisTickColour;
                ctx.textBaseline = 'middle';
                ctx.textAlign = 'start';
                metrics = ctx.measureText(xTickValue);
                textWidth = metrics.width;
                ctx.fillText(xTickValue, xPix - (textWidth / 2), yPix1 + parseInt(xAxisTickSize));

                // Top x-axis ticks
                if (xTickStyle != 'none') {
                    drawLine(xPix, yPix2, xPix, yPix2 + xTickLength, xTickColour, 1);
                }
                
                // Check for x-axis grid display
                if (gridStyle == 'horizontal' || gridStyle == 'both') {
                    var x1PixGrid = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                    var y1PixGrid = graphIndent;
                    var x2PixGrid = ((xTick - xRangeMin) / xPixRes) + graphIndent;
                    var y2PixGrid = canvasHeight - graphIndent;
                    drawLine(x1PixGrid, y1PixGrid, x2PixGrid, y2PixGrid, gridColour, 1);
                }

            }

            // Display major y ticks
            var yRange = yRangeMax - yRangeMin;

            var yTickAdjust = 0;
            switch (yTickStyle) {
                case 'inset':
                    yTickAdjust = 0
                    break;
                case 'outset':
                    yTickAdjust = yTickLength;
                    break;
                case 'center':
                    yTickAdjust = yTickLength / 2;
                    break;
            }

            for (i = 0; i <= yNumTicks; i++) {
                var yTick = yRangeMin + (i * (yRange / yNumTicks));

                var xPix1 = graphIndent - yTickAdjust;
                var xPix2 = canvasWidth - graphIndent + yTickAdjust;
                var yPix = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);

                // Left y-axis ticks
                if (yTickStyle != 'none') {
                    drawLine(xPix1, yPix, xPix1 + yTickLength, yPix, yTickColour, 1);
                }

                // Display y-axis tick value
                var yTickValue = yTick.toFixed(2).toString();
                ctx.font = yAxisTickSize + 'px ' + yAxisTickFont;
                ctx.fillStyle = yAxisTickColour;
                ctx.textBaseline = 'middle';
                ctx.textAlign = 'start';
                metrics = ctx.measureText(yTickValue);
                textWidth = metrics.width;
                ctx.fillText(yTickValue, xPix1 - (textWidth + parseInt(yAxisTickSize)), yPix);

                // Right y-axis ticks
                if (yTickStyle != 'none') {
                    drawLine(xPix2, yPix, xPix2 - yTickLength, yPix, yTickColour, 1);
                }
                
                // Check for y-axis grid display
                if (gridStyle == 'vertical' || gridStyle == 'both') {
                    var x1PixGrid = graphIndent;
                    var y1PixGrid = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);
                    var x2PixGrid = canvasWidth - graphIndent;
                    var y2PixGrid = canvasHeight - graphIndent - ((yTick - yRangeMin) / yPixRes);
                    drawLine(x1PixGrid, y1PixGrid, x2PixGrid, y2PixGrid, gridColour, 1);
                }

            }

            // Display title and axis labels

            // Title
            ctx.font = graphTitleSize + 'px ' + graphTitleFont;
            ctx.fillStyle = graphTitleColour;
            ctx.textBaseline = 'middle';
            ctx.textAlign = 'start';
            metrics = ctx.measureText(graphTitle);
            textWidth = metrics.width;
            ctx.fillText(graphTitle, (graphIndent + (canvasWidth - (2 * graphIndent)) / 2) - (textWidth / 2), graphIndent / 2);            

            // X-Axis
            ctx.font = xAxisLabelSize + 'px ' + xAxisLabelFont;
            ctx.fillStyle = xAxisLabelColour;
            ctx.textBaseline = 'middle';
            ctx.textAlign = 'start';
            metrics = ctx.measureText(xAxisLabel);
            textWidth = metrics.width;
            ctx.fillText(xAxisLabel, (graphIndent + (canvasWidth - (2 * graphIndent)) / 2) - (textWidth / 2), canvasHeight - (graphIndent / 4));

            // Y-Axis
            ctx.save();
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            var angleInRadians = -90 * Math.PI / 180;
            
            ctx.font = yAxisLabelSize + 'px ' + yAxisLabelFont;
            ctx.fillStyle = yAxisLabelColour;
            ctx.textBaseline = 'middle';
            metrics = ctx.measureText(yAxisLabel);
            textWidth = metrics.width;
            var xPos = (graphIndent / 4) - textWidth / 2;
            var yPos = graphIndent + ((canvasHeight - (2 * graphIndent)) / 2);
            ctx.translate(xPos + 0.5 * textWidth, yPos + 0.5 * yAxisLabelSize);
            ctx.rotate(angleInRadians);
            ctx.fillText(yAxisLabel, -0.5 * textWidth, -0.5 * yAxisLabelSize);
            ctx.restore();
                        
            // Display the series data
            animateAcceleration = (animateAcceleration * animateAcceleration);
            delta = delta + parseInt(animateAcceleration);

            if (animatePlot == true) {
                pointsPlotted = pointsPlotted + delta;
                if (pointsPlotted >= seriesData.length - 1) {
                    pointsPlotted = seriesData.length - 1;
                    animatePlot = false;
                }
                //versadev.debugWindow(delta.toString());
            } else {
                pointsPlotted = seriesData.length - 1;
            }

            for (i = 0; i <= pointsPlotted; i++) {
                x1 = seriesData[i].x1;
                y1 = seriesData[i].y1;
                drawPoint(x1, y1, graphDataPointColour, 4, 1);
            }           
             
        };

        // Define Data Class
        var xyData = function (id, x1, y1) {

            // Object Representing A Data Point
            this.id = id;
            this.x1 = x1;
            this.y1 = y1;

            // Attach methods to object here                    

        };

        var fw_update = function () {
            // Update The Interface

            // we update time 
            var currTime = new Date().getTime();
            // and calculate time of between two frames
            var delta = (currTime - lastTime) / 1000.0;
            // we need to remember previous time
            lastTime = currTime;

            // we don't accept too big delta values
            if (delta > 1.0) delta = 1.0;

            // update game logic
            updateScene(delta);
            // render game
            renderScene(delta);
        };

        var updateScene = function (delta) {

        };

        var renderScene = function (delta) {

            // Clear Canvas
            ctx.clearRect(0, 0, c.width, c.height);

            // Draw Clock Face
            drawGraph();

        };

        // Privileged / Public Methods And Properties
        return {

            appVersion: 1.0,

            init: function(fps) {
              
            // Get the canvas element using DOM
            c = document.getElementById('canvasGraph');

                // Make sure we don't execute when canvas is not supported
                if (c.getContext) {

                    // Use getContext to use the canvas for drawing
                    ctx = c.getContext("2d");

                    // Set the framerate
                    frameRate = fps;

                    // We need to initialize lastTime, so we don't get false delta value on first update
                    lastTime = new Date().getTime();

                    // Generate xy data

                    var x1 = 0;
                    var y1 = 0;

                    // Clear current series data
                    x1Last = null;
                    y1Last = null;
                    seriesData.length = 0;

                    for (i = -100; i <= 100; i++) {

                        // Generate quadratic xy data
                        //x1 = i;
                        //y1 = x1 * x1;

                        // Generate random data
                        var yMin = -100;
                        var yMax = 100;
                        x1 = i;
                        y1 = versadev.randomNumberFromRange(yMin, yMax);

                        // Generate data point and add to series (collection)
                        var dataPoint = new xyData(i, x1, y1);
                        seriesData.push(dataPoint);
                    }

                    // Display graph
                    drawGraph();

                    if (fps > 0) {
                        timeInterval = 1000 / fps;
                        // Timer calls fw_update function based on frameRate
                        setInterval(fw_update, timeInterval);
                    } else {
                        // If we don't have timer, we update our framework only once
                        fw_update();
                    }

                } else {
                    window.alert('Your browser does not support HTML5.');
                }
            }

        };
    })();

    var versadev = function () {

        // Private Variables And Functions
        var privateVariable = 10;

        function privateFunction() {
            var a = 1;
            alert(privateVariable);
            return false;
        }

        // Privileged / Public Methods And Properties
        return {

            debugWindow: function (debugMsg) {
                var win = document.getElementById('debugWindow');
                win.innerHTML = debugMsg + '</br>' + win.innerHTML;
                return false;
            },

            debugWindowClear: function () {
                var win = document.getElementById('debugWindow');
                win.innerHTML = '';
                return false;
            },

            randomNumber: function (maxValue) {
                // Generate A Random Number From 0 to maxValue
                var min = 0;
                var max = maxValue;
                return Math.floor(Math.random() * (max - min + 1)) + min;
            },

            randomNumberFromRange: function (minValue, maxValue) {
                // Generate A Random Number From minValue to maxValue
                var min = minValue;
                var max = maxValue;
                return Math.floor(Math.random() * (max - min + 1)) + min;
            },

            getRandomColor: function () {
                var letters = new Array();
                letters = '0123456789ABCDEF'.split('');
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.round(Math.random() * 15)];
                }
                return color;
            }

        };

    }();

    </script>

</head>
<body onload="versaGraph.init(50);">

    <h1>versaGraph - Simple Canvas-based Graphing</h1>
    
    <div style="position:absolute;top:10px;left:10px;">
        <canvas id="canvasGraph" width="800" height="600" style="border:1px solid #000000;b"></canvas> 
    </div>

    <div id="debugWindow" style="position:absolute;top:650px;left:10px;width:500px;height:200px;border:1px solid #000000;overflow:scroll;">
        Debug Window
    </div>

</body>
</html>
